{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,WAGA,IAAMC,EAAO,CACXC,SAAUC,SAASC,cAAc,SAGnCH,EAAKC,SAASG,iBAAiB,UAQ/B,SAAsBC,GAKpB,IAJAA,EAAMC,iBACNC,EAASP,EAAKC,SAASO,SAASC,OAAOC,MACvCC,EAAQC,OAAOZ,EAAKC,SAASO,SAASK,MAAMH,OAC5CI,EAAOF,OAAOZ,EAAKC,SAASO,SAASO,KAAKL,OAClCM,EAAIT,EAAQS,GAAK,EAEvBC,EADAC,GAAY,EACYP,GACrBQ,MAAK,SAAAC,G,IAAGC,EAAQD,EAARE,SAAUC,EAAKH,EAALP,MACjBW,EAAA1B,GAAS2B,OAAOC,QACd,uBAAwCC,OAAfN,EAAS,QAAYM,OAANJ,EAAM,M,IAGjDK,OAAM,SAAAR,G,IAAGS,EAAQT,EAARE,SAAUQ,EAAKV,EAALP,MAClBW,EAAA1B,GAAS2B,OAAOM,QACd,sBAAqCJ,OAAfE,EAAS,QAAYF,OAANG,EAAM,M,IAGjDnB,GAASG,EAEXI,EAAW,EACXF,EAAI,EACJhB,EAAKC,SAAS+B,O,IA7BhB,IACId,EAAW,EACXF,EAAI,EACJT,EAAS,EACTI,EAAQ,EACRG,EAAO,EA2BX,SAASG,EAAcgB,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAC5BC,YAAW,WACfH,EACFF,EAAQ,CAAEd,SAAAW,EAAUpB,MAAAqB,IAEpBG,EAAO,CAAEf,SAAAW,EAAUpB,MAAAqB,G,GAEpBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-aio-3.2.6.min.js';\n\nconst refs = {\n  formElem: document.querySelector('form'),\n};\n\nrefs.formElem.addEventListener('submit', onFormSubmit);\nlet timerId = null;\nlet position = 0;\nlet i = 0;\nlet amount = 0;\nlet delay = 0;\nlet step = 0;\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  amount = refs.formElem.elements.amount.value;\n  delay = Number(refs.formElem.elements.delay.value);\n  step = Number(refs.formElem.elements.step.value);\n  for (i; i < amount; i += 1) {\n    position += 1\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n  position = 0;\n  i = 0;  \n  refs.formElem.reset()\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    timerId = setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","formElem","document","querySelector","addEventListener","event","preventDefault","$ce04d3a99e08e73b$var$amount","elements","amount","value","$ce04d3a99e08e73b$var$delay","Number","delay","$ce04d3a99e08e73b$var$step","step","$ce04d3a99e08e73b$var$i","$ce04d3a99e08e73b$var$createPromise","$ce04d3a99e08e73b$var$position","then","param","position1","position","delay1","$parcel$interopDefault","Notify","success","concat","catch","position2","delay2","failure","reset","position3","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.3f459560.js.map"}